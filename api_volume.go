
/*
 * Public API - Development
 *
 * Public API
 *
 * API version: v1
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"fmt"
	"github.com/antihax/optional"
)

// Linger please
var (
	_ context.Context
)

type VolumeApiService service
/*
VolumeApiService Khởi tạo volume.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param projectId
 * @param optional nil or *VolumeApiVolumeCreateInitProjectIdGetOpts - Optional Parameters:
     * @param "UserRootId" (optional.Int32) -  Id IAM User root
     * @param "ProjectId" (optional.Int32) -  Project-Id
     * @param "XProjectId" (optional.Int32) -  X-Project-Id
@return ModelApiResponse
*/

type VolumeApiVolumeCreateInitProjectIdGetOpts struct {
    UserRootId optional.Int32
    ProjectId optional.Int32
    XProjectId optional.Int32
}

func (a *VolumeApiService) VolumeCreateInitProjectIdGet(ctx context.Context, projectId int32, localVarOptionals *VolumeApiVolumeCreateInitProjectIdGetOpts) (ModelApiResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Get")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ModelApiResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/volume/create-init/{projectId}"
	localVarPath = strings.Replace(localVarPath, "{"+"projectId"+"}", fmt.Sprintf("%v", projectId), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.UserRootId.IsSet() {
		localVarHeaderParams["User-Root-Id"] = parameterToString(localVarOptionals.UserRootId.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ProjectId.IsSet() {
		localVarHeaderParams["Project-Id"] = parameterToString(localVarOptionals.ProjectId.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.XProjectId.IsSet() {
		localVarHeaderParams["X-Project-Id"] = parameterToString(localVarOptionals.XProjectId.Value(), "")
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 201 {
			var v ModelApiResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
VolumeApiService Khởi tạo volume.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *VolumeApiVolumeCreatePostOpts - Optional Parameters:
     * @param "Body" (optional.Interface of VolumeCreateModel) - 
     * @param "UserRootId" (optional.Int32) -  Id IAM User root
     * @param "ProjectId" (optional.Int32) -  Project-Id
     * @param "XProjectId" (optional.Int32) -  X-Project-Id
@return ModelApiResponse
*/

type VolumeApiVolumeCreatePostOpts struct {
    Body optional.Interface
    UserRootId optional.Int32
    ProjectId optional.Int32
    XProjectId optional.Int32
}

func (a *VolumeApiService) VolumeCreatePost(ctx context.Context, localVarOptionals *VolumeApiVolumeCreatePostOpts) (ModelApiResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ModelApiResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/volume/create"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json", "text/json", "application/_*+json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.UserRootId.IsSet() {
		localVarHeaderParams["User-Root-Id"] = parameterToString(localVarOptionals.UserRootId.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ProjectId.IsSet() {
		localVarHeaderParams["Project-Id"] = parameterToString(localVarOptionals.ProjectId.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.XProjectId.IsSet() {
		localVarHeaderParams["X-Project-Id"] = parameterToString(localVarOptionals.XProjectId.Value(), "")
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.Body.IsSet() {
		
		localVarOptionalBody:= localVarOptionals.Body.Value()
		localVarPostBody = &localVarOptionalBody
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 201 {
			var v ModelApiResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
VolumeApiService Xóa volume.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @param optional nil or *VolumeApiVolumeDeleteIdDeleteOpts - Optional Parameters:
     * @param "UserRootId" (optional.Int32) -  Id IAM User root
     * @param "ProjectId" (optional.Int32) -  Project-Id
     * @param "XProjectId" (optional.Int32) -  X-Project-Id
@return ModelApiResponse
*/

type VolumeApiVolumeDeleteIdDeleteOpts struct {
    UserRootId optional.Int32
    ProjectId optional.Int32
    XProjectId optional.Int32
}

func (a *VolumeApiService) VolumeDeleteIdDelete(ctx context.Context, id int32, localVarOptionals *VolumeApiVolumeDeleteIdDeleteOpts) (ModelApiResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Delete")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ModelApiResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/volume/delete/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", fmt.Sprintf("%v", id), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.UserRootId.IsSet() {
		localVarHeaderParams["User-Root-Id"] = parameterToString(localVarOptionals.UserRootId.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ProjectId.IsSet() {
		localVarHeaderParams["Project-Id"] = parameterToString(localVarOptionals.ProjectId.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.XProjectId.IsSet() {
		localVarHeaderParams["X-Project-Id"] = parameterToString(localVarOptionals.XProjectId.Value(), "")
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 201 {
			var v ModelApiResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
/*
VolumeApiService Điều chỉnh máy ảo.
 * @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param optional nil or *VolumeApiVolumeResizePostOpts - Optional Parameters:
     * @param "Body" (optional.Interface of VolumeResizeModel) - 
     * @param "UserRootId" (optional.Int32) -  Id IAM User root
     * @param "ProjectId" (optional.Int32) -  Project-Id
     * @param "XProjectId" (optional.Int32) -  X-Project-Id
@return ModelApiResponse
*/

type VolumeApiVolumeResizePostOpts struct {
    Body optional.Interface
    UserRootId optional.Int32
    ProjectId optional.Int32
    XProjectId optional.Int32
}

func (a *VolumeApiService) VolumeResizePost(ctx context.Context, localVarOptionals *VolumeApiVolumeResizePostOpts) (ModelApiResponse, *http.Response, error) {
	var (
		localVarHttpMethod = strings.ToUpper("Post")
		localVarPostBody   interface{}
		localVarFileName   string
		localVarFileBytes  []byte
		localVarReturnValue ModelApiResponse
	)

	// create path and map variables
	localVarPath := a.client.cfg.BasePath + "/volume/resize"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHttpContentTypes := []string{"application/json", "text/json", "application/_*+json"}

	// set Content-Type header
	localVarHttpContentType := selectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHttpContentType
	}

	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{"text/plain", "application/json", "text/json"}

	// set Accept header
	localVarHttpHeaderAccept := selectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHttpHeaderAccept
	}
	if localVarOptionals != nil && localVarOptionals.UserRootId.IsSet() {
		localVarHeaderParams["User-Root-Id"] = parameterToString(localVarOptionals.UserRootId.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.ProjectId.IsSet() {
		localVarHeaderParams["Project-Id"] = parameterToString(localVarOptionals.ProjectId.Value(), "")
	}
	if localVarOptionals != nil && localVarOptionals.XProjectId.IsSet() {
		localVarHeaderParams["X-Project-Id"] = parameterToString(localVarOptionals.XProjectId.Value(), "")
	}
	// body params
	if localVarOptionals != nil && localVarOptionals.Body.IsSet() {
		
		localVarOptionalBody:= localVarOptionals.Body.Value()
		localVarPostBody = &localVarOptionalBody
	}
	r, err := a.client.prepareRequest(ctx, localVarPath, localVarHttpMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHttpResponse, err := a.client.callAPI(r)
	if err != nil || localVarHttpResponse == nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHttpResponse.Body)
	localVarHttpResponse.Body.Close()
	if err != nil {
		return localVarReturnValue, localVarHttpResponse, err
	}

	if localVarHttpResponse.StatusCode < 300 {
		// If we succeed, return the data, otherwise pass on to decode error.
		err = a.client.decode(&localVarReturnValue, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
		if err == nil { 
			return localVarReturnValue, localVarHttpResponse, err
		}
	}

	if localVarHttpResponse.StatusCode >= 300 {
		newErr := GenericSwaggerError{
			body: localVarBody,
			error: localVarHttpResponse.Status,
		}
		if localVarHttpResponse.StatusCode == 201 {
			var v ModelApiResponse
			err = a.client.decode(&v, localVarBody, localVarHttpResponse.Header.Get("Content-Type"));
				if err != nil {
					newErr.error = err.Error()
					return localVarReturnValue, localVarHttpResponse, newErr
				}
				newErr.model = v
				return localVarReturnValue, localVarHttpResponse, newErr
		}
		return localVarReturnValue, localVarHttpResponse, newErr
	}

	return localVarReturnValue, localVarHttpResponse, nil
}
